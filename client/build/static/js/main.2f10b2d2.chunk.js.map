{"version":3,"sources":["components/Table/index.js","services/socketio.js","components/ProcessesTable/index.js","components/ProcessLogs/index.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","style","render","row","getRowProps","cells","cell","getCellProps","client","socketio","ProcessesTable","ids","onFilter","useMemo","Header","accessor","Cell","value","toFixed","minWidth","String","onClick","emit","values","pm_id","type","checked","includes","onChange","makeColumns","ListItem","isLast","autoScroll","ref","useRef","useEffect","current","scrollIntoView","behaviour","json","trim","startsWith","replaceAll","replace","JSON","parse","reduce","prev","cur","Object","keys","Array","from","Set","x","error","channel","hideInfo","pname","time","showInfoBelow","setHideInfo","reverse","i","length","next","item","ProcessLogs","useState","setAutoScroll","pause","setPause","out","setOut","err","setErr","filter","id","App","processes","setProcesses","ologs","setoLogs","setids","setData","on","logs","pid","logs_count","new_logs","slice","log","key","push","sort","a","b","timestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f10b2d2.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport \"./index.css\";\r\n\r\nexport default function Table({ columns, data }) {\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t} = useTable({ columns, data });\r\n\r\n\tif (!columns || !data) return <></>;\r\n\treturn (\r\n\t\t// apply the table props\r\n\t\t<div className=\"table-wrapper\">\r\n\t\t\t<table {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the header rows\r\n\t\t\t\t\t\theaderGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t\t// Apply the header row props\r\n\t\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Loop over the headers in each row\r\n\t\t\t\t\t\t\t\t\theaderGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t\t\t// Apply the header cell props\r\n\t\t\t\t\t\t\t\t\t\t<th\r\n\t\t\t\t\t\t\t\t\t\t\t{...column.getHeaderProps({\r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle: column.style,\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Render the header\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolumn.render(\"Header\")\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</thead>\r\n\t\t\t\t{/* Apply the table body props */}\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the table rows\r\n\t\t\t\t\t\trows.map((row) => {\r\n\t\t\t\t\t\t\t// Prepare the row for display\r\n\t\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// Apply the row props\r\n\t\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Loop over the rows cells\r\n\t\t\t\t\t\t\t\t\t\trow.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\t\t\t// Apply the cell props\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the cell contents\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell.render(\"Cell\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import socketio from \"socket.io-client\";\r\n\r\nconst client = socketio();\r\nexport default client;\r\n","import React, { useMemo } from \"react\";\r\nimport Table from \"../Table\";\r\nimport CJSON from \"circular-json\";\r\nimport \"./index.css\";\r\nimport socketio from \"../../services/socketio\";\r\n\r\nconst makeColumns = ({ ids, onFilter }) => [\r\n\t{ Header: \"ID\", accessor: \"pm_id\" },\r\n\r\n\t{\r\n\t\tHeader: \"RAM\",\r\n\t\taccessor: \"monit.memory\",\r\n\t\tCell: ({ value }) => (value / 1e6).toFixed(1) + \"MB\",\r\n\t\tstyle: {\r\n\t\t\tminWidth: 70,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tHeader: \"CPU\",\r\n\t\taccessor: \"monit.cpu\",\r\n\t\tCell: ({ value }) => String(value.toFixed(0)) + \"%\",\r\n\t\tstyle: {\r\n\t\t\tminWidth: 48,\r\n\t\t},\r\n\t},\r\n\r\n\t{\r\n\t\tHeader: \"\",\r\n\t\taccessor: \"stop\",\r\n\t\tCell: ({ row }) => (\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"process-table-button\"\r\n\t\t\t\tonClick={() => socketio.emit(\"stop\", row.values.pm_id)}\r\n\t\t\t>\r\n\t\t\t\tParar\r\n\t\t\t</button>\r\n\t\t),\r\n\t},\r\n\t{\r\n\t\tHeader: \"\",\r\n\t\taccessor: \"restart\",\r\n\t\tCell: ({ row }) => (\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"process-table-button\"\r\n\t\t\t\tonClick={() => socketio.emit(\"restart\", row.values.pm_id)}\r\n\t\t\t>\r\n\t\t\t\tReiniciar\r\n\t\t\t</button>\r\n\t\t),\r\n\t},\r\n\t{\r\n\t\tHeader: \"STATUS\",\r\n\t\taccessor: \"pm2_env.status\",\r\n\t\tCell: ({ value }) => (\r\n\t\t\t<div className={\"status-col\"}>\r\n\t\t\t\t<span className={`dot dot-${value}`}></span>\r\n\t\t\t</div>\r\n\t\t),\r\n\t},\r\n\t{\r\n\t\tHeader: \"NAME\",\r\n\t\taccessor: \"name\",\r\n\t},\r\n\t{\r\n\t\tHeader: \"LOGS\",\r\n\t\tCell: ({ row }) => (\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"checkbox\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={ids.includes(row.values.pm_id)}\r\n\t\t\t\tonChange={() => onFilter(row.values.pm_id)}\r\n\t\t\t/>\r\n\t\t),\r\n\t},\r\n];\r\n\r\nexport default function ProcessesTable({ data, ids, onFilter }) {\r\n\tconst columns = useMemo(() => makeColumns({ ids, onFilter }), [ids]);\r\n\treturn (\r\n\t\t<div className=\"processes-table-container\">\r\n\t\t\t<h3>Processos</h3>\r\n\t\t\t<Table columns={columns} data={data}></Table>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { useState, useEffect, useMemo, forwardRef, useRef } from \"react\";\r\nimport \"./index.css\";\r\nimport Table from \"../Table\";\r\n\r\nfunction ListItem({ data, isLast, autoScroll }) {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!isLast) return;\r\n\t\tif (!autoScroll) return;\r\n\t\tref.current.scrollIntoView({ behaviour: \"smooth\" });\r\n\t}, [ref, data, isLast, autoScroll]);\r\n\r\n\tconst value = useMemo(() => {\r\n\t\ttry {\r\n\t\t\tlet json = data.data.trim();\r\n\t\t\tif (json.startsWith(\"{'\") || json.startsWith(\"[{'\")) {\r\n\t\t\t\tjson = json.replaceAll(\"'\", '\"');\r\n\t\t\t}\r\n\r\n\t\t\tjson = json.replace(/\\bNone\\b/g, \"null\");\r\n\t\t\tjson = json.replace(/\\bNaN\\b/g, \"null\");\r\n\r\n\t\t\tjson = JSON.parse(json);\r\n\r\n\t\t\tlet columns = json.reduce(\r\n\t\t\t\t(prev, cur) => [...prev, ...Object.keys(cur)],\r\n\t\t\t\t[]\r\n\t\t\t);\r\n\t\t\tcolumns = Array.from(new Set(columns));\r\n\t\t\tcolumns = columns.map((x) => ({\r\n\t\t\t\tHeader: x,\r\n\t\t\t\taccessor: x,\r\n\t\t\t}));\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Table columns={columns} data={json} />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t} catch (error) {}\r\n\r\n\t\treturn <code className={`log-${data.channel}`}>{data.data}</code>;\r\n\t}, [data]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div ref={ref} className={\"process-logs-item\"}>\r\n\t\t\t\t{!data.hideInfo && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<center\r\n\t\t\t\t\t\t\tclassName={`process-logs-item-divider process-logs-item-divider-${data.channel}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<code\r\n\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\"process-logs-item-info \" + data.channel\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t[{data.pname}]\r\n\t\t\t\t\t\t\t</code>\r\n\t\t\t\t\t\t\t<code\r\n\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\"process-logs-item-info \" + data.channel\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t[{data.time}]\r\n\t\t\t\t\t\t\t</code>\r\n\t\t\t\t\t\t</center>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t\t{value}\r\n\r\n\t\t\t\t{data.showInfoBelow && (\r\n\t\t\t\t\t<center className=\"process-logs-item-divider\">\r\n\t\t\t\t\t\t<code\r\n\t\t\t\t\t\t\tclassName={\"process-logs-item-info \" + data.channel}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t[{data.pname}]\r\n\t\t\t\t\t\t</code>\r\n\r\n\t\t\t\t\t\t<code\r\n\t\t\t\t\t\t\tclassName={\"process-logs-item-info \" + data.channel}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t[{data.time}]\r\n\t\t\t\t\t\t</code>\r\n\t\t\t\t\t</center>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nfunction setHideInfo(data) {\r\n\tdata = data.reverse();\r\n\r\n\tfor (let i = 0; i < data.length - 1; i++) {\r\n\t\tif (i > data.length - 1) break;\r\n\r\n\t\tconst next = data[i + 1];\r\n\t\tconst item = { ...data[i] };\r\n\r\n\t\tif (item.pname == next.pname && item.channel === next.channel) {\r\n\t\t\titem.hideInfo = true;\r\n\t\t}\r\n\r\n\t\tif (i === 0) {\r\n\t\t\titem[\"showInfoBelow\"] = true;\r\n\t\t}\r\n\r\n\t\tdata[i] = item;\r\n\t}\r\n\r\n\treturn data.reverse();\r\n}\r\n\r\nexport default function ProcessLogs({ data }) {\r\n\tconst [autoScroll, setAutoScroll] = useState(true);\r\n\tconst [pause, setPause] = useState(false);\r\n\r\n\tconst [out, setOut] = useState([]);\r\n\tconst [err, setErr] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (pause) return;\r\n\r\n\t\tlet out = data.filter((x) => x.channel === \"out\");\r\n\t\tlet err = data.filter((x) => x.channel === \"err\");\r\n\r\n\t\tout = setHideInfo(out);\r\n\t\terr = setHideInfo(err);\r\n\r\n\t\tsetOut(out);\r\n\t\tsetErr(err);\r\n\t}, [data, pause]);\r\n\r\n\treturn (\r\n\t\t<div className=\"process-logs-container\">\r\n\t\t\t<h3>Logs</h3>\r\n\r\n\t\t\t<div className=\"process-logs-lists-container\">\r\n\t\t\t\t<div className=\"process-logs-list\">\r\n\t\t\t\t\t{out.map((x, i) => (\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tisLast={i === out.length - 1}\r\n\t\t\t\t\t\t\tautoScroll={autoScroll}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"process-logs-list err\">\r\n\t\t\t\t\t{err.map((x, i) => (\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tisLast={i === err.length - 1}\r\n\t\t\t\t\t\t\tautoScroll={autoScroll}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"process-logs-footer\">\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"autoScroll\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={autoScroll}\r\n\t\t\t\t\t\tonChange={() => setAutoScroll((x) => !x)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\"\t\"}Scroll Automático\r\n\t\t\t\t</label>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"autoScroll\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={pause}\r\n\t\t\t\t\t\tonChange={() => setPause((x) => !x)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\"\t\"}Pausar\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { useState, useEffect, useMemo } from \"react\";\r\nimport ProcessesTable from \"./components/ProcessesTable\";\r\nimport ProcessLogs from \"./components/ProcessLogs\";\r\nimport Terminal from \"./components/Terminal\";\r\n\r\nimport socketio from \"./services/socketio\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\tconst [processes, setProcesses] = useState([]);\r\n\tconst [ologs, setoLogs] = useState({});\r\n\tconst [ids, setids] = useState([]);\r\n\tconst [data, setData] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketio.on(\"processes\", setProcesses);\r\n\t\tsocketio.on(\"logs\", setoLogs);\r\n\t}, []);\r\n\r\n\tfunction onFilter(id) {\r\n\t\tsetids((ids) => {\r\n\t\t\tif (ids.includes(id)) {\r\n\t\t\t\tids = ids.filter((x) => x !== id);\r\n\t\t\t} else {\r\n\t\t\t\tids = [id, ...ids];\r\n\t\t\t}\r\n\t\t\treturn ids;\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet logs = Object.values(ologs);\r\n\r\n\t\tif (!logs.length) return setData([]);\r\n\r\n\t\tlogs = logs.reduce((prev, current) => [...prev, ...current]);\r\n\r\n\t\tif (ids.length) {\r\n\t\t\tlogs = logs.filter((x) => ids.includes(x.pid));\r\n\t\t}\r\n\r\n\t\tlet logs_count = {};\r\n\t\tlet new_logs = [];\r\n\r\n\t\tfor (const log of logs.slice().reverse()) {\r\n\t\t\tconst key = log.pname + log.channel;\r\n\t\t\tif (!logs_count[key]) {\r\n\t\t\t\tlogs_count[key] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (logs_count[key] > 150) continue;\r\n\r\n\t\t\tnew_logs.push(log);\r\n\r\n\t\t\tlogs_count[key] += 1;\r\n\t\t}\r\n\t\tlogs = new_logs.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n\t\tsetData(logs);\r\n\t}, [ologs, ids]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ProcessesTable data={processes} ids={ids} onFilter={onFilter} />\r\n\t\t\t<ProcessLogs data={data} ids={ids} />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}