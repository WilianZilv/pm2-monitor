{"version":3,"sources":["components/Table/index.js","components/ProcessesTable/index.js","components/ProcessLogs/index.js","services/socketio.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","style","render","row","getRowProps","cells","cell","getCellProps","ProcessesTable","ids","onFilter","useMemo","Header","accessor","Cell","value","toFixed","width","String","className","type","checked","includes","values","pm_id","onChange","makeColumns","ListItem","isLast","autoScroll","ref","useRef","useEffect","current","scrollIntoView","behaviour","channel","pname","time","ProcessLogs","useState","setAutoScroll","out","filter","x","slice","err","i","length","id","socketio","App","processes","setProcesses","ologs","setoLogs","setids","on","state","logs","log","merged","pid","timestamp","split","unshift","reduce","item","push","sort","a","b","handleLog","filteredLogs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.018691fb.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t} = useTable({ columns, data });\r\n\r\n\tif (!columns || !data) return <></>;\r\n\treturn (\r\n\t\t// apply the table props\r\n\t\t<table {...getTableProps()}>\r\n\t\t\t<thead>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Loop over the header rows\r\n\t\t\t\t\theaderGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t// Apply the header row props\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Loop over the headers in each row\r\n\t\t\t\t\t\t\t\theaderGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t\t// Apply the header cell props\r\n\t\t\t\t\t\t\t\t\t<th\r\n\t\t\t\t\t\t\t\t\t\t{...column.getHeaderProps({\r\n\t\t\t\t\t\t\t\t\t\t\tstyle: column.style,\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t// Render the header\r\n\t\t\t\t\t\t\t\t\t\t\tcolumn.render(\"Header\")\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</thead>\r\n\t\t\t{/* Apply the table body props */}\r\n\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Loop over the table rows\r\n\t\t\t\t\trows.map((row) => {\r\n\t\t\t\t\t\t// Prepare the row for display\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t// Apply the row props\r\n\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Loop over the rows cells\r\n\t\t\t\t\t\t\t\t\trow.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\t\t// Apply the cell props\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the cell contents\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcell.render(\"Cell\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport Table from \"../Table\";\r\nimport CJSON from \"circular-json\";\r\nimport \"./index.css\";\r\n\r\nconst makeColumns = ({ ids, onFilter }) => [\r\n\t{ Header: \"ID\", accessor: \"pm_id\" },\r\n\t{\r\n\t\tHeader: \"Nome\",\r\n\t\taccessor: \"name\",\r\n\t},\r\n\t{\r\n\t\tHeader: \"RAM\",\r\n\t\taccessor: \"monit.memory\",\r\n\t\tCell: ({ value }) => (value / 1e6).toFixed(1) + \"MB\",\r\n\t\tstyle: {\r\n\t\t\twidth: 84,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tHeader: \"CPU\",\r\n\t\taccessor: \"monit.cpu\",\r\n\t\tCell: ({ value }) => String(value) + \" %\",\r\n\t\tstyle: {\r\n\t\t\twidth: 64,\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tHeader: \"Status\",\r\n\t\taccessor: \"pm2_env.status\",\r\n\t\tCell: ({ value }) => (\r\n\t\t\t<div className={\"status-col\"}>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`dot ${value === \"online\" ? value : \"\"}`}\r\n\t\t\t\t></span>\r\n\t\t\t</div>\r\n\t\t),\r\n\t},\r\n\t{\r\n\t\tHeader: \"Logs\",\r\n\t\tCell: ({ row }) => (\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"checkbox\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={ids.includes(row.values.pm_id)}\r\n\t\t\t\tonChange={() => onFilter(row.values.pm_id)}\r\n\t\t\t/>\r\n\t\t),\r\n\t},\r\n];\r\n\r\nexport default function ProcessesTable({ data, ids, onFilter }) {\r\n\tconst columns = useMemo(() => makeColumns({ ids, onFilter }), [ids]);\r\n\treturn (\r\n\t\t<div className=\"processes-table-container\">\r\n\t\t\t<h1>Processos</h1>\r\n\t\t\t<Table columns={columns} data={data}></Table>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { useState, useEffect, useMemo, forwardRef, useRef } from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction ListItem({ data, isLast, autoScroll }) {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!isLast) return;\r\n\t\tif (!autoScroll) return;\r\n\t\tref.current.scrollIntoView({ behaviour: \"smooth\" });\r\n\t}, [ref, data, isLast, autoScroll]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div ref={ref} className={\"process-logs-item \" + data.channel}>\r\n\t\t\t\t<div className={\"process-logs-top-bar\"}>\r\n\t\t\t\t\t<strong className={\"process-logs-item-title\"}>\r\n\t\t\t\t\t\t{data.pname}:{\" \"}\r\n\t\t\t\t\t</strong>\r\n\r\n\t\t\t\t\t<strong>{data.time}</strong>\r\n\t\t\t\t</div>\r\n\t\t\t\t<code>{data.data}</code>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default function ProcessLogs({ data }) {\r\n\tconst [autoScroll, setAutoScroll] = useState(true);\r\n\r\n\tconst { out, err } = useMemo(() => {\r\n\t\tconst out = data.filter((x) => x.channel === \"out\").slice(0, 150);\r\n\t\tconst err = data.filter((x) => x.channel === \"err\").slice(0, 150);\r\n\t\treturn { out, err };\r\n\t}, [data]);\r\n\r\n\treturn (\r\n\t\t<div className=\"process-logs-container\">\r\n\t\t\t<h1>Logs</h1>\r\n\t\t\t<div className=\"process-logs-lists-container\">\r\n\t\t\t\t<div className=\"process-logs-list\">\r\n\t\t\t\t\t{out.map((x, i) => (\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tisLast={i === out.length - 1}\r\n\t\t\t\t\t\t\tautoScroll={autoScroll}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"process-logs-list\">\r\n\t\t\t\t\t{err.map((x, i) => (\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tisLast={i === err.length - 1}\r\n\t\t\t\t\t\t\tautoScroll={autoScroll}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tdata={x}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"process-logs-footer\">\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"autoScroll\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tchecked={autoScroll}\r\n\t\t\t\t\t\tonChange={() => setAutoScroll((x) => !x)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\"\t\"}Scroll Automático\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import socketio from \"socket.io-client\";\r\n\r\nexport default socketio();\r\n","import { useState, useEffect, useMemo } from \"react\";\r\nimport ProcessesTable from \"./components/ProcessesTable\";\r\nimport ProcessLogs from \"./components/ProcessLogs\";\r\nimport socketio from \"./services/socketio\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction handleLog(logs, log) {\r\n\tlet merged = false;\r\n\tlogs = logs.map((x) => {\r\n\t\tx = { ...x };\r\n\t\tif (x.pid === log.pid && x.channel === log.channel) {\r\n\t\t\tif (x.timestamp + 5000 >= log.timestamp) {\r\n\t\t\t\tif (x.data.split(\"\\n\").length <= 32) {\r\n\t\t\t\t\tlog = { ...log };\r\n\t\t\t\t\tlog.data = x.data + log.data;\r\n\t\t\t\t\tlog.timestamp = x.timestamp;\r\n\t\t\t\t\tx = log;\r\n\t\t\t\t\tmerged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t});\r\n\r\n\tif (!merged) logs.unshift(log);\r\n\r\n\tconst { out, err } = logs\r\n\t\t.filter((x) => x.pid === log.pid)\r\n\t\t.reduce(\r\n\t\t\t(data, item) => {\r\n\t\t\t\tdata[item.channel].push(item);\r\n\t\t\t\tdata[item.channel] = data[item.channel].slice(0, 150);\r\n\t\t\t\treturn data;\r\n\t\t\t},\r\n\t\t\t{ out: [], err: [] }\r\n\t\t);\r\n\r\n\tlogs = logs.filter((x) => x.pid !== log.pid);\r\n\r\n\tlogs = [...out, ...err, ...logs].sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n\treturn logs;\r\n}\r\n\r\nfunction App() {\r\n\tconst [processes, setProcesses] = useState([]);\r\n\tconst [ologs, setoLogs] = useState([]);\r\n\tconst [ids, setids] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketio.on(\"processes\", setProcesses);\r\n\t\tsocketio.on(\"log\", (data) =>\r\n\t\t\tsetoLogs((state) => handleLog(state, data))\r\n\t\t);\r\n\t}, []);\r\n\r\n\tconst filteredLogs = useMemo(() => {\r\n\t\tif (!ids.length) return ologs;\r\n\t\treturn ologs.filter((x) => ids.includes(x.pid));\r\n\t}, [ologs, ids]);\r\n\r\n\tfunction onFilter(id) {\r\n\t\tsetids((ids) => {\r\n\t\t\tif (ids.includes(id)) {\r\n\t\t\t\tids = ids.filter((x) => x !== id);\r\n\t\t\t} else {\r\n\t\t\t\tids = [id, ...ids];\r\n\t\t\t}\r\n\r\n\t\t\treturn ids;\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<main>\r\n\t\t\t\t<ProcessesTable\r\n\t\t\t\t\tdata={processes}\r\n\t\t\t\t\tids={ids}\r\n\t\t\t\t\tonFilter={onFilter}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ProcessLogs data={filteredLogs} ids={ids} />\r\n\t\t\t</main>\r\n\t\t\t<footer></footer>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}