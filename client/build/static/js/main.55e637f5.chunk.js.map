{"version":3,"sources":["components/Table/index.js","components/ProcessesTable/index.js","components/ProcessLogs/index.js","services/socketio.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ProcessesTable","ids","onFilter","useMemo","Header","accessor","Cell","value","toFixed","String","className","type","checked","includes","values","pm_id","onChange","makeColumns","ListItem","channel","pname","time","ProcessLogs","logs","slice","useEffect","document","getElementsByClassName","scrollIntoView","filter","x","i","socketio","App","useState","processes","setProcesses","ologs","setoLogs","setids","on","state","log","merged","pid","timestamp","split","length","unshift","reduce","item","push","out","err","sort","a","b","handleLog","filteredLogs","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.55e637f5.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { useTable } from 'react-table'\r\n\r\nexport default function Table({ columns, data }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data })\r\n\r\n  if (!columns || !data) return <></>\r\n  return (\r\n    // apply the table props\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {\r\n          // Loop over the header rows\r\n          headerGroups.map((headerGroup) => (\r\n            // Apply the header row props\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {\r\n                // Loop over the headers in each row\r\n                headerGroup.headers.map((column) => (\r\n                  // Apply the header cell props\r\n                  <th {...column.getHeaderProps()}>\r\n                    {\r\n                      // Render the header\r\n                      column.render('Header')\r\n                    }\r\n                  </th>\r\n                ))\r\n              }\r\n            </tr>\r\n          ))\r\n        }\r\n      </thead>\r\n      {/* Apply the table body props */}\r\n      <tbody {...getTableBodyProps()}>\r\n        {\r\n          // Loop over the table rows\r\n          rows.map((row) => {\r\n            // Prepare the row for display\r\n            prepareRow(row)\r\n            return (\r\n              // Apply the row props\r\n              <tr {...row.getRowProps()}>\r\n                {\r\n                  // Loop over the rows cells\r\n                  row.cells.map((cell) => {\r\n                    // Apply the cell props\r\n                    return (\r\n                      <td {...cell.getCellProps()}>\r\n                        {\r\n                          // Render the cell contents\r\n                          cell.render('Cell')\r\n                        }\r\n                      </td>\r\n                    )\r\n                  })\r\n                }\r\n              </tr>\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport Table from \"../Table\";\r\nimport CJSON from \"circular-json\";\r\nimport \"./index.css\";\r\n\r\nconst makeColumns = ({ ids, onFilter }) => [\r\n\t{ Header: \"ID\", accessor: \"pm_id\" },\r\n\t{\r\n\t\tHeader: \"Nome\",\r\n\t\taccessor: \"name\",\r\n\t},\r\n\t{\r\n\t\tHeader: \"RAM\",\r\n\t\taccessor: \"monit.memory\",\r\n\t\tCell: ({ value }) => (value / 1e6).toFixed(1) + \"MB\",\r\n\t},\r\n\t{\r\n\t\tHeader: \"CPU\",\r\n\t\taccessor: \"monit.cpu\",\r\n\t\tCell: ({ value }) => String(value) + \" %\",\r\n\t},\r\n\t{\r\n\t\tHeader: \"Status\",\r\n\t\taccessor: \"pm2_env.status\",\r\n\t\tCell: ({ value }) => (\r\n\t\t\t<div className={\"status-col\"}>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`dot ${value === \"online\" ? value : \"\"}`}\r\n\t\t\t\t></span>\r\n\t\t\t</div>\r\n\t\t),\r\n\t},\r\n\t{\r\n\t\tHeader: \"Logs\",\r\n\t\tCell: ({ row }) => (\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"checkbox\"\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={ids.includes(row.values.pm_id)}\r\n\t\t\t\tonChange={() => onFilter(row.values.pm_id)}\r\n\t\t\t/>\r\n\t\t),\r\n\t},\r\n];\r\n\r\nexport default function ProcessesTable({ data, ids, onFilter }) {\r\n\tconst columns = useMemo(() => makeColumns({ ids, onFilter }), [ids]);\r\n\treturn (\r\n\t\t<div className=\"processes-table-container\">\r\n\t\t\t<h1>Processos</h1>\r\n\t\t\t<Table columns={columns} data={data}></Table>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { useState, useEffect, useMemo } from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction ListItem({ data }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={\"process-logs-item \" + data.channel}>\r\n\t\t\t\t<div className={\"process-logs-top-bar\"}>\r\n\t\t\t\t\t<strong className={\"process-logs-item-title\"}>\r\n\t\t\t\t\t\t{data.pname}:{\" \"}\r\n\t\t\t\t\t</strong>\r\n\r\n\t\t\t\t\t<strong>{data.time}</strong>\r\n\t\t\t\t</div>\r\n\t\t\t\t{data.data}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default function ProcessLogs({ data }) {\r\n\tconst logs = useMemo(() => {\r\n\t\tlet logs = [...data];\r\n\t\tlogs.slice(0, 100);\r\n\r\n\t\treturn logs;\r\n\t}, [data]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument\r\n\t\t\t.getElementsByClassName(\"process-logs-list\")[0]\r\n\t\t\t.scrollIntoView();\r\n\t}, [logs]);\r\n\treturn (\r\n\t\t<div className=\"process-logs-container\">\r\n\t\t\t<h1>Logs</h1>\r\n\t\t\t<div className=\"process-logs-lists-container\">\r\n\t\t\t\t<div className=\"process-logs-list\">\r\n\t\t\t\t\t{logs\r\n\t\t\t\t\t\t.filter((x) => x.channel === \"out\")\r\n\t\t\t\t\t\t.map((x, i) => (\r\n\t\t\t\t\t\t\t<ListItem key={i} data={x} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"process-logs-list\">\r\n\t\t\t\t\t{logs\r\n\t\t\t\t\t\t.filter((x) => x.channel === \"err\")\r\n\t\t\t\t\t\t.map((x, i) => (\r\n\t\t\t\t\t\t\t<ListItem key={i} data={x} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import socketio from \"socket.io-client\";\r\n\r\nexport default socketio();\r\n","import { useState, useEffect, useMemo } from \"react\";\r\nimport ProcessesTable from \"./components/ProcessesTable\";\r\nimport ProcessLogs from \"./components/ProcessLogs\";\r\nimport socketio from \"./services/socketio\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction handleLog(logs, log) {\r\n\tlet merged = false;\r\n\tlogs = logs.map((x) => {\r\n\t\tx = { ...x };\r\n\t\tif (x.pid === log.pid && x.channel === log.channel) {\r\n\t\t\tif (x.timestamp + 2500 >= log.timestamp) {\r\n\t\t\t\tif (x.data.split(\"\\n\").length <= 10) {\r\n\t\t\t\t\tlog = { ...log };\r\n\t\t\t\t\tlog.data += x.data;\r\n\t\t\t\t\tx = log;\r\n\t\t\t\t\tmerged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t});\r\n\r\n\tif (!merged) logs.unshift(log);\r\n\r\n\tconst { out, err } = logs\r\n\t\t.filter((x) => x.pid === log.pid)\r\n\t\t.reduce(\r\n\t\t\t(data, item) => {\r\n\t\t\t\tdata[item.channel].push(item);\r\n\t\t\t\tdata[item.channel] = data[item.channel].slice(0, 5);\r\n\t\t\t\treturn data;\r\n\t\t\t},\r\n\t\t\t{ out: [], err: [] }\r\n\t\t);\r\n\r\n\tlogs = logs.filter((x) => x.pid !== log.pid);\r\n\r\n\tlogs = [...out, ...err, ...logs].sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n\treturn logs;\r\n}\r\n\r\nfunction App() {\r\n\tconst [processes, setProcesses] = useState([]);\r\n\tconst [ologs, setoLogs] = useState([]);\r\n\tconst [ids, setids] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsocketio.on(\"processes\", setProcesses);\r\n\t\tsocketio.on(\"log\", (data) =>\r\n\t\t\tsetoLogs((state) => handleLog(state, data))\r\n\t\t);\r\n\t}, []);\r\n\r\n\tconst logs = useMemo(() => {\r\n\t\treturn ologs;\r\n\t}, [ologs, ids]);\r\n\r\n\tconst filteredLogs = useMemo(() => {\r\n\t\tif (!ids.length) return logs;\r\n\t\treturn logs.filter((x) => ids.includes(x.pid));\r\n\t}, [logs, ids]);\r\n\r\n\tfunction onFilter(id) {\r\n\t\tsetids((ids) => {\r\n\t\t\tif (ids.includes(id)) {\r\n\t\t\t\tids = ids.filter((x) => x !== id);\r\n\t\t\t} else {\r\n\t\t\t\tids = [id, ...ids];\r\n\t\t\t}\r\n\r\n\t\t\treturn ids;\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<main>\r\n\t\t\t\t<ProcessesTable\r\n\t\t\t\t\tdata={processes}\r\n\t\t\t\t\tids={ids}\r\n\t\t\t\t\tonFilter={onFilter}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ProcessLogs data={filteredLogs} ids={ids} />\r\n\t\t\t</main>\r\n\t\t\t<footer></footer>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}